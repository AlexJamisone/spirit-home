// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Define the data model for users
model User {
    id         String      @id @unique
    role       Role        @default(USER)
    firstName  String?
    lastName   String?
    email      String?
    orders     Order[]
    comments   Comment[]
    categories Catergory[]
    address    Address[]
    updateAt   DateTime    @default(now()) @updatedAt
}

model Address {
    id           String  @id @default(cuid())
    user         User?   @relation(fields: [userId], references: [id])
    userId       String?
    firstName    String
    lastName     String
    city         String
    contactPhone String
    point        String
    archived     Boolean @default(false)
    Order        Order[]
}

model Catergory {
    id          String    @id @unique @default(cuid())
    title       String    @unique
    path        String
    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    product     Product[]
}

model Product {
    id            String                @id @default(cuid())
    name          String
    description   String
    image         String[]
    archived      Boolean               @default(false)
    categoryTitle String?
    comments      Comment[]
    category      Catergory?            @relation(fields: [categoryTitle], references: [title])
    orders        OrderItem[]
    priceHistory  ProductPriceHistory[]
    size          Size[]
    quantity      Quantity[]
}

model Size {
    id       String     @id @default(cuid())
    size     String
    product  Product[]
    quantity Quantity[]
}

model Quantity {
    id        String      @id @default(cuid())
    sizeId    String
    value     Int
    size      Size        @relation(fields: [sizeId], references: [id])
    product   Product     @relation(fields: [productId], references: [id])
    productId String
    orderItem OrderItem[]
}

model ProductPriceHistory {
    id            String   @id @default(cuid())
    product       Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId     String
    price         Int
    effectiveFrom DateTime @default(now())
}

model Order {
    id        String      @id @default(cuid())
    user      User?       @relation(fields: [userId], references: [id])
    address   Address     @relation(fields: [addressId], references: [id])
    userId    String?
    status    OrderStatus @default(PENDING)
    createdAt DateTime    @default(now())
    orderItem OrderItem[]
    addressId String
}

model OrderItem {
    id           String   @id @default(cuid())
    quantity     Int
    product      Product  @relation(fields: [productId], references: [id])
    productId    String
    order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId      String
    selectedQt   Quantity @relation(fields: [selectedQtId], references: [id], onDelete: Cascade)
    selectedQtId String
}

model Comment {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    value     String
}

enum Role {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    PROCESSING
    COMPLETED
    CANCELLED
}
