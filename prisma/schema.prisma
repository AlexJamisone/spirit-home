// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Define the data model for users
model User {
    id         String      @id @unique
    role       Role        @default(USER)
    firstName  String?
    lastName   String?
    email      String?
    orders     Order[]
    comments   Comment[]
    categories Category[]
    address    Address[]
    updateAt   DateTime    @default(now()) @updatedAt
    favorites  Favorites[]
}

model Address {
    id           String  @id @default(cuid())
    user         User?   @relation(fields: [userId], references: [id])
    userId       String?
    firstName    String
    lastName     String
    contactPhone String
    point        Point?
    archived     Boolean @default(false)
    Order        Order[]
}

model Point {
    id              String  @id @default(cuid())
    address         Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
    addressId       String  @unique
    name            String
    work_time       String
    phone           String?
    email           String
    type            String
    region          String
    city            String
    longitude       Float
    latitude        Float
    addressName     String
    addressFullName String
}

model Category {
    id          String        @id @unique @default(cuid())
    title       String        @unique
    path        String
    createdBy   User          @relation(fields: [createdById], references: [id])
    createdById String
    subCategory SubCategory[]
    product     Product[]
}

model SubCategory {
    id         String    @id @unique @default(cuid())
    title      String    @unique
    path       String
    category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    product    Product[]
}

model Product {
    id               String                @id @default(cuid())
    name             String
    description      String
    image            String[]
    archived         Boolean               @default(false)
    comments         Comment[]
    subCategory      SubCategory?          @relation(fields: [subCategoryTitle], references: [title])
    subCategoryTitle String?
    category         Category?             @relation(fields: [categoryTitle], references: [title])
    categoryTitle    String?
    orders           OrderItem[]
    priceHistory     ProductPriceHistory[]
    size             Size[]
    quantity         Quantity[]
    favorites        Favorites[]
}

model Size {
    id       String     @id @default(cuid())
    size     String
    product  Product[]
    quantity Quantity[]
}

model Favorites {
    productId String  @id
    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [id])
    userId    String
}

model Quantity {
    id        String      @id @default(cuid())
    sizeId    String
    value     Int
    size      Size        @relation(fields: [sizeId], references: [id])
    product   Product     @relation(fields: [productId], references: [id])
    productId String
    orderItem OrderItem[]
}

model ProductPriceHistory {
    id            String   @id @default(cuid())
    product       Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId     String
    price         Int
    effectiveFrom DateTime @default(now())
}

model Order {
    id          String      @id @default(cuid())
    orderNumber Int         @default(autoincrement())
    user        User?       @relation(fields: [userId], references: [id])
    address     Address     @relation(fields: [addressId], references: [id])
    userId      String?
    status      OrderStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    orderItem   OrderItem[]
    addressId   String
    viewed      Boolean     @default(false)
}

model OrderItem {
    id           String   @id @default(cuid())
    quantity     Int
    product      Product  @relation(fields: [productId], references: [id])
    productId    String
    order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId      String
    selectedQt   Quantity @relation(fields: [selectedQtId], references: [id], onDelete: Cascade)
    selectedQtId String
}

model Comment {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    value     String
}

model Accordion {
    id        String   @id @unique @default(cuid())
    title     String
    content   String
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Check {
    id          String         @id @default(cuid())
    checkNumber Int            @default(autoincrement())
    content     CheckContent[]
    status      CheckStatus    @default(COMPLETED)
    totalSum    Int
    createdAt   DateTime       @default(now())
    updateAt    DateTime       @updatedAt
    printId     String?
}

model CheckContent {
    id       String @id @default(cuid())
    checkId  String
    check    Check  @relation(fields: [checkId], references: [id], onDelete: Cascade)
    name     String
    size     String
    quantity Int
    qtId     String
    price    Int
}

enum CheckStatus {
    COMPLETED
    CANCELLED
}

enum Role {
    USER
    ADMIN
    SUPERADMIN
}

enum OrderStatus {
    PENDING
    PROCESSING
    COMPLETED
    CANCELLED
}
