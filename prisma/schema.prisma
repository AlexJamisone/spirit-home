// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Define the data model for users
model User {
    id         String     @id @unique
    role       Role       @default(USER)
    firstName  String?
    lastName   String?
    email      String?
    orders     Order[]
    comments   Comment[]
    categories Category[]
    address    Address[]
    updateAt   DateTime   @default(now()) @updatedAt
}

model Address {
    id           String  @id @default(cuid())
    user         User?   @relation(fields: [userId], references: [id])
    userId       String?
    firstName    String
    lastName     String
    contactPhone String
    point        String
    archived     Boolean @default(false)
    order        Order[]
}

model Category {
    id          String        @id @unique @default(cuid())
    title       String        @unique
    path        String
    createdBy   User          @relation(fields: [createdById], references: [id])
    createdById String
    subCategory SubCategory[]
    product     Product[]
}

model SubCategory {
    id         String    @id @unique @default(cuid())
    title      String    @unique
    path       String
    category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    product    Product[]
    promotions Promotion[]
}

model Product {
    id               String       @id @default(cuid())
    name             String
    description      String[]
    image            String[]
    archived         Boolean      @default(false)
    subCategoryTitle String?
    categoryTitle    String?
    comments         Comment[]
    subCategory      SubCategory? @relation(fields: [subCategoryTitle], references: [title])
    category         Category?    @relation(fields: [categoryTitle], references: [title])
    orders           OrderItem[]
    price            Int
    size             Size[]
    promotions Promotion[]
}

model Size {
    id      String    @id @default(cuid())
    value   String    @unique
    product Product[]
}

model Order {
    id          String      @id @default(cuid())
    orderNumber Int         @default(autoincrement())
    user        User?       @relation(fields: [userId], references: [id])
    userId      String?
    status      OrderStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    orderItem   OrderItem[]
    viewed      Boolean     @default(false)
    address     Address?    @relation(fields: [addressId], references: [id])
    addressId   String?
    trase       String?
    total       Int
}

model OrderItem {
    id        String  @id @default(cuid())
    quantity  Int
    size      String
    price     Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String
}

model Comment {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    product   Product @relation(fields: [productId], references: [id])
    productId String
    value     String
}

model Accordion {
    id        String   @id @unique @default(cuid())
    title     String
    content   String[]
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Check {
    id          String         @id @default(cuid())
    checkNumber Int            @default(autoincrement())
    content     CheckContent[]
    status      CheckStatus    @default(COMPLETED)
    totalSum    Int
    createdAt   DateTime       @default(now())
    updateAt    DateTime       @updatedAt
    printId     String?
}

model CheckContent {
    id       String @id @default(cuid())
    checkId  String
    check    Check  @relation(fields: [checkId], references: [id], onDelete: Cascade)
    name     String
    size     String
    quantity Int
    qtId     String
    price    Int
}
model Promotion {
    id String @id @default(cuid())
    code String @unique
    type PromotionType
    protection ProtectionType
    value Int
    category SubCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
   categoryId String?
   Product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
   productId String? 

}
enum PromotionType {
    FIX
    PROCENT
}
enum ProtectionType {
    PUBCLIC
    AUTH
}
enum CheckStatus {
    COMPLETED
    CANCELLED
}

enum Role {
    USER
    ADMIN
    SUPERADMIN
}

enum OrderStatus {
    PENDING
    PROCESSING
    COMPLETED
    CANCELLED
}
